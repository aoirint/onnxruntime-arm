name: build
on:
  push:
    branches:
      - main
  # release:
  #   types:
  #     - published

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - ARTIFACT_NAME: onnxruntime-armhf
            IMAGE_TAG: onnxruntime-build:armhf
            BASE_IMAGE: ubuntu:bionic
            CC_VERSION: '8'
            CXX_VERSION: '8'
            ARCH: arm-linux-gnueabihf
            ONNXRUNTIME_VERSION: v1.8.2
            # add --arm for gcc-8: https://github.com/microsoft/onnxruntime/issues/4189
            # skip test: https://github.com/microsoft/onnxruntime/issues/2436
            ATOMIC: '1'
            BUILD_OPTS: --arm --config Release --parallel --update --build --build_shared_lib

    env:
      IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.BASE_IMAGE }}
            CC_VERSION=${{ matrix.CC_VERSION }}
            CXX_VERSION=${{ matrix.CXX_VERSION }}
            ARCH=${{ matrix.ARCH }}
            ONNXRUNTIME_VERSION=${{ matrix.ONNXRUNTIME_VERSION }}
            ATOMIC=${{ matrix.ATOMIC }}
          # target: ${{ matrix.TARGET }}
          # platforms: ${{ matrix.PLATFORM }}
          load: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}-buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_TAG }}-buildcache,mode=max

      - name: Build ONNX Runtime
        run: |
          docker run --rm \
            -v "${PWD}/build:/onnxruntime/build" \
            ${{ env.IMAGE_TAG }} bash ./build.sh ${{ matrix.BUILD_OPTS }}

      - name: Organize artifact
        run: |
          mkdir artifact

          # copy build artifact
          mkdir artifact/lib
          NAME=$(basename build/Linux/Release/libonnxruntime.so.*)
          cp "build/Linux/Release/${NAME}" artifact/lib/
          ln -s ${NAME} artifact/lib/libonnxruntime.so

          # create a container to copy files from microsoft/onnxruntime repository
          CONTAINER_ID=$(docker run -d ${{ env.IMAGE_TAG }})

          # copy header files
          mkdir ./artifact/include
          readarray -t HEADERS <<EOF
            onnxruntime/core/session/onnxruntime_c_api.h
            onnxruntime/core/session/onnxruntime_cxx_api.h
            onnxruntime/core/session/onnxruntime_cxx_inline.h
            onnxruntime/core/providers/cpu/cpu_provider_factory.h
            onnxruntime/core/session/onnxruntime_session_options_config_keys.h
            onnxruntime/core/session/onnxruntime_run_options_config_keys.h
            onnxruntime/core/framework/provider_options.h
          EOF

          for path in "${HEADERS[@]}"; do
            docker cp "$CONTAINER_ID:/onnxruntime/include/${path}" ./artifact/include/
          done

          # copy docs & metadata
          docker cp $CONTAINER_ID:/onnxruntime/VERSION_NUMBER ./artifact/
          docker cp $CONTAINER_ID:/onnxruntime/LICENSE ./artifact/
          docker cp $CONTAINER_ID:/onnxruntime/ThirdPartyNotices.txt ./artifact/
          docker cp $CONTAINER_ID:/onnxruntime/docs/Privacy.md ./artifact/
          docker cp $CONTAINER_ID:/onnxruntime/README.md ./artifact/
          docker rm -f $CONTAINER_ID

          echo "$GITHUB_SHA" >> ./artifact/GIT_COMMIT_ID

          tar cf artifact/* onnxruntime.tgz

      # Upload
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.ARTIFACT_NAME }}
          path: onnxruntime.tgz
          retention-days: 7
